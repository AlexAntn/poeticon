/* soapStub.h
   Generated by gSOAP 2.7.17 from quote.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	""
#define SOAP_NAMESPACE_OF_ns2	""
#define SOAP_NAMESPACE_OF_ns1	"http://webservice.praxicon.poeticon.csri/"
#define SOAP_NAMESPACE_OF_ns3	"http://jaxb.dev.java.net/array"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (8)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType(): __item(NULL), soap(NULL) { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#ifndef SOAP_TYPE_xsd__byte_
#define SOAP_TYPE_xsd__byte_ (11)
/* Primitive xsd:byte schema type: */
class SOAP_CMAC xsd__byte_ : public xsd__anyType
{
public:
	char __item;
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_xsd__byte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__byte_() { xsd__byte_::soap_default(NULL); }
	virtual ~xsd__byte_() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (12)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HelloWorld
#define SOAP_TYPE_ns1__HelloWorld (14)
/* ns1:HelloWorld */
class SOAP_CMAC ns1__HelloWorld : public xsd__anyType
{
public:
	std::string *name;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_ns1__HelloWorld */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HelloWorld(): name(NULL) { ns1__HelloWorld::soap_default(NULL); }
	virtual ~ns1__HelloWorld() { }
};
#endif

#ifndef SOAP_TYPE_ns1__HelloWorldResponse
#define SOAP_TYPE_ns1__HelloWorldResponse (15)
/* ns1:HelloWorldResponse */
class SOAP_CMAC ns1__HelloWorldResponse : public xsd__anyType
{
public:
	std::string *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns1__HelloWorldResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__HelloWorldResponse(): return_(NULL) { ns1__HelloWorldResponse::soap_default(NULL); }
	virtual ~ns1__HelloWorldResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__queryPRAXICON
#define SOAP_TYPE_ns1__queryPRAXICON (16)
/* ns1:queryPRAXICON */
class SOAP_CMAC ns1__queryPRAXICON : public xsd__anyType
{
public:
	std::vector<xsd__anyType * >objectsAround;	/* optional element of type xsd:anyType */
	std::string *query;	/* optional element of type xsd:string */
	std::vector<xsd__anyType * >noObjects;	/* optional element of type xsd:anyType */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns1__queryPRAXICON */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__queryPRAXICON(): query(NULL) { ns1__queryPRAXICON::soap_default(NULL); }
	virtual ~ns1__queryPRAXICON() { }
};
#endif

#ifndef SOAP_TYPE_ns1__queryPRAXICONResponse
#define SOAP_TYPE_ns1__queryPRAXICONResponse (17)
/* ns1:queryPRAXICONResponse */
class SOAP_CMAC ns1__queryPRAXICONResponse : public xsd__anyType
{
public:
	class ns1__iitResponse *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:iitResponse */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_ns1__queryPRAXICONResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__queryPRAXICONResponse(): return_(NULL) { ns1__queryPRAXICONResponse::soap_default(NULL); }
	virtual ~ns1__queryPRAXICONResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__iitResponse
#define SOAP_TYPE_ns1__iitResponse (18)
/* ns1:iitResponse */
class SOAP_CMAC ns1__iitResponse : public xsd__anyType
{
public:
	std::vector<class ns1__iitAction * >response;	/* optional element of type ns1:iitAction */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns1__iitResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__iitResponse() { ns1__iitResponse::soap_default(NULL); }
	virtual ~ns1__iitResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__iitAction
#define SOAP_TYPE_ns1__iitAction (19)
/* ns1:iitAction */
class SOAP_CMAC ns1__iitAction : public xsd__anyType
{
public:
	std::string *movement;	/* optional element of type xsd:string */
	class ns1__iitObject *object1;	/* optional element of type ns1:iitObject */
	ns1__iitObject *object2;	/* optional element of type ns1:iitObject */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns1__iitAction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__iitAction(): movement(NULL), object1(NULL), object2(NULL) { ns1__iitAction::soap_default(NULL); }
	virtual ~ns1__iitAction() { }
};
#endif

#ifndef SOAP_TYPE_ns1__iitObject
#define SOAP_TYPE_ns1__iitObject (20)
/* ns1:iitObject */
class SOAP_CMAC ns1__iitObject : public xsd__anyType
{
public:
	std::vector<class ns3__byteArray * >images;	/* optional element of type ns3:byteArray */
	std::string *name;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns1__iitObject */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__iitObject(): name(NULL) { ns1__iitObject::soap_default(NULL); }
	virtual ~ns1__iitObject() { }
};
#endif

#ifndef SOAP_TYPE_ns3__byteArray
#define SOAP_TYPE_ns3__byteArray (21)
/* ns3:byteArray */
class SOAP_CMAC ns3__byteArray : public xsd__anyType
{
public:
	std::vector<char >item;	/* optional element of type xsd:byte */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns3__byteArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__byteArray() { ns3__byteArray::soap_default(NULL); }
	virtual ~ns3__byteArray() { }
};
#endif

#ifndef SOAP_TYPE___ns1__HelloWorld
#define SOAP_TYPE___ns1__HelloWorld (35)
/* Operation wrapper: */
struct __ns1__HelloWorld
{
public:
	ns1__HelloWorld *ns1__HelloWorld_;	/* optional element of type ns1:HelloWorld */
};
#endif

#ifndef SOAP_TYPE___ns1__queryPRAXICON
#define SOAP_TYPE___ns1__queryPRAXICON (39)
/* Operation wrapper: */
struct __ns1__queryPRAXICON
{
public:
	ns1__queryPRAXICON *ns1__queryPRAXICON_;	/* optional element of type ns1:queryPRAXICON */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (40)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (41)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (43)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (46)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (47)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (10)
typedef char xsd__byte;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ns1__HelloWorld(struct soap*, ns1__HelloWorld *ns1__HelloWorld_, ns1__HelloWorldResponse *ns1__HelloWorldResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__queryPRAXICON(struct soap*, ns1__queryPRAXICON *ns1__queryPRAXICON_, ns1__queryPRAXICONResponse *ns1__queryPRAXICONResponse_);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__HelloWorld(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__queryPRAXICON(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__HelloWorld(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__HelloWorld *ns1__HelloWorld_, ns1__HelloWorldResponse *ns1__HelloWorldResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__queryPRAXICON(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__queryPRAXICON *ns1__queryPRAXICON_, ns1__queryPRAXICONResponse *ns1__queryPRAXICONResponse_);

#endif

/* End of soapStub.h */
