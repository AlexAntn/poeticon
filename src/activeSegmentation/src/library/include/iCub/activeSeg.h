/* 
 * Copyright (C) 2010 RobotCub Consortium, European Commission FP6 Project IST-004370
 * Author: Vadim Tikhanoff
 * email:  vadim.tikhanoff@iit.it
 * website: www.robotcub.org
 * Permission is granted to copy, distribute, and/or modify this program
 * under the terms of the GNU General Public License, version 2 or any
 * later version published by the Free Software Foundation.
 *
 * A copy of the license can be found at
 * http://www.robotcub.org/icub/license/gpl.txt
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details
*/

/**
 * \defgroup activeSegmentationLib Segmentation library based on an active segmentation by fixation
 * @ingroup icub_activeSegmentation
 *  
 * \section intro_sec Description
 * This library is used to segments areas of interest based on a fixation point. The algorithm consists of two steps: (1) a probabilistic boundary edge map is generated by merging the available visual information (e.g. intensity, color) and (2) the optimal contour is constructed by selecting the closed contour that minimizes a cost based on the continuity and overall shape of the candidate contours in the edge map
 
 * based on the following paper Active Segmentation With Fixation Ajay K. Mishra,
 * Yiannis Aloimonos and Cheong Loong Fah International Conference on Computer Vision (ICCV), 2009
 *
 * \author Vadim Tikhanoff Ajay Mishra
 *  
 * Copyright (C) 2010 RobotCub Consortium
 *
 * CopyPolicy: Released under the terms of the GNU GPL v2.0. 
 *
 */

#ifndef ACTIVESEG_H
#define ACTIVESEG_H

#include <yarp/os/Semaphore.h>
#include <yarp/os/Log.h>
#include <yarp/os/Time.h>
#include <yarp/os/ResourceFinder.h>

#include "iCub/segmentationLayer.h"

#include <iostream>
#include <string>
#include <cv.h>
#include <highgui.h>
#include "opencv2/calib3d/calib3d.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui/highgui.hpp"

#include <list>

using namespace std;
using namespace yarp::os;

class SegInfo
{
public:
    SegInfo()
    {
        cropWidth   = 50;
        cropHeight  = 50;
    }

    SegInfo( int fix_x, int fix_y, int cropWidth=50, int cropHeight=50 )
    {
        SegInfo::fix_x      = fix_x;
        SegInfo::fix_y      = fix_y;
        SegInfo::cropWidth  = cropWidth;
        SegInfo::cropHeight = cropHeight;
    }

    int fix_x, fix_y;
    int cropWidth;
    int cropHeight;
};

class ActiveSeg
{
private:
    segLayer                frame;
    yarp::os::Property      fileLoc;
    void segmentWithFixation(IplImage *img_in, double x, double y);

public:

    typedef enum __Error
    {
        ERR_NULL_IMAGE,
        ERR_OUT_OF_BOUND,
        OK
    } Error;

    ActiveSeg()
    {}

    ~ActiveSeg()
    {};

    bool configure(yarp::os::ResourceFinder &rf);

    ActiveSeg::Error getSegWithFixation( const IplImage *img, IplImage* &seg, SegInfo &info );

    ActiveSeg::Error getTemplateFromSeg( const IplImage *img, IplImage* seg, IplImage* &tpl, SegInfo &info );

    ActiveSeg::Error getTemplate( const IplImage *img, IplImage* &tpl, SegInfo &info );

};

#endif
